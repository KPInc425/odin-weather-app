(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([e.id,"body {\n    background-color: black;\n    color: white;\n}\n\n.testing {\n    color: white;\n}\n\n.userInputContainer {\n    margin: 0 auto;\n    justify-content: center;\n    grid-column-end: 3;\n    column-gap: 10px;\n}\n\n.fieldset {\n    position: relative;\n    border: 1px solid white;\n    padding: 20px;\n    width: 50%;\n    margin: 0 auto;\n}\n\n.fieldset h1 {\n    position: absolute;\n    top: 0;\n    font-size: 18px;\n    line-height: 1;\n    margin: -9px 0 0; /* half of font-size */\n    background: black;\n    padding: 0 3px;\n}\n\n.flexContainer {\n    display: flex;\n    justify-content: space-evenly;\n    /* border: 1px solid green; */\n    grid-column-start: 1;\n    text-align: center;\n}\n\n.flexContainer p {\n    padding: 10px;\n    border: 1px dotted blue;\n}\n\n.flex2 * {\n    flex: 2;\n}\n\n.flex3 * {\n    flex: 3;\n}\n\n.flex4 * {\n    flex: 4;\n}\n\n.hidden {\n    display: none;\n}\n\n.windDataContainer {\n    display: flex;\n    flex-direction: column;\n    border: 1px solid purple;\n    position: relative;\n    width: 100%;\n    /* padding: 20px; */\n    text-align: center;\n    margin: 16px 0;\n}\n\n.grid {\n    display: grid;\n    grid-template-columns: auto 25%;\n    justify-items: stretch;\n    /* border: 1px solid pink; */\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,cAAc;IACd,uBAAuB;IACvB,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,uBAAuB;IACvB,aAAa;IACb,UAAU;IACV,cAAc;AAClB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,eAAe;IACf,cAAc;IACd,gBAAgB,EAAE,sBAAsB;IACxC,iBAAiB;IACjB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,6BAA6B;IAC7B,oBAAoB;IACpB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,wBAAwB;IACxB,kBAAkB;IAClB,WAAW;IACX,mBAAmB;IACnB,kBAAkB;IAClB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,+BAA+B;IAC/B,sBAAsB;IACtB,4BAA4B;AAChC",sourcesContent:["body {\n    background-color: black;\n    color: white;\n}\n\n.testing {\n    color: white;\n}\n\n.userInputContainer {\n    margin: 0 auto;\n    justify-content: center;\n    grid-column-end: 3;\n    column-gap: 10px;\n}\n\n.fieldset {\n    position: relative;\n    border: 1px solid white;\n    padding: 20px;\n    width: 50%;\n    margin: 0 auto;\n}\n\n.fieldset h1 {\n    position: absolute;\n    top: 0;\n    font-size: 18px;\n    line-height: 1;\n    margin: -9px 0 0; /* half of font-size */\n    background: black;\n    padding: 0 3px;\n}\n\n.flexContainer {\n    display: flex;\n    justify-content: space-evenly;\n    /* border: 1px solid green; */\n    grid-column-start: 1;\n    text-align: center;\n}\n\n.flexContainer p {\n    padding: 10px;\n    border: 1px dotted blue;\n}\n\n.flex2 * {\n    flex: 2;\n}\n\n.flex3 * {\n    flex: 3;\n}\n\n.flex4 * {\n    flex: 4;\n}\n\n.hidden {\n    display: none;\n}\n\n.windDataContainer {\n    display: flex;\n    flex-direction: column;\n    border: 1px solid purple;\n    position: relative;\n    width: 100%;\n    /* padding: 20px; */\n    text-align: center;\n    margin: 16px 0;\n}\n\n.grid {\n    display: grid;\n    grid-template-columns: auto 25%;\n    justify-items: stretch;\n    /* border: 1px solid pink; */\n}\n"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);o&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),n.push(u))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var i={},a=[],c=0;c<e.length;c++){var s=e[c],l=o.base?s[0]+o.base:s[0],u=i[l]||0,d="".concat(l," ").concat(u);i[l]=u+1;var A=t(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)n[A].references++,n[A].updater(p);else{var m=r(p,o);o.byIndex=c,n.splice(c,0,{identifier:d,updater:m,references:1})}a.push(d)}return a}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=t(i[a]);n[c].references--}for(var s=o(e,r),l=0;l<i.length;l++){var u=t(i[l]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}i=s}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={id:o,exports:{}};return e[o](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),i=t(569),a=t.n(i),c=t(565),s=t.n(c),l=t(216),u=t.n(l),d=t(589),A=t.n(d),p=t(426),m={};m.styleTagTransform=A(),m.setAttributes=s(),m.insert=a().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=u(),n()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;let f,x,h="95b3fba8515b07e36f4947f16bc32b95",C="Everett";const y=document.querySelector("#inputCity");function g(e){console.warn(`ERROR(${e.code}): ${e.message}`)}function v(e){return 1.8*(e-273)+32}document.querySelector("#btnLocalWeather").addEventListener("click",(async()=>{if(C=y.value,y.value="",""!==C){await async function(){let e=await async function(){try{let e=await fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${C}&appid=${h}`,{mode:"cors"});return await e.json()}catch(e){g(e)}}();f=e[0].lat,x=e[0].lon}();let r=await async function(){try{let e=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${f}&lon=${x}&appid=${h}`,{mode:"cors"});return await e.json()}catch(e){e(e)}}(),i=(o=r,{tempCurrent:Math.round(v(o.main.temp))+"F째",tempFeels:Math.round(v(o.main.feels_like))+"F째",tempHigh:Math.round(v(o.main.temp_max))+"F째",tempLow:Math.round(v(o.main.temp_min))+"F째",humidity:o.main.humidity+"%",pressure:(t=o.main.pressure,.029529983071445*t).toFixed(2)+" inches",cloudsPercent:o.clouds.all+"%",description:o.weather[0].description,windSpeed:(n=o.wind.speed,2.23694*n).toFixed(2)+"mph",windDirection:(e=o.wind.deg,e>348.75||e<11.25?"N":e>11.25||e<33.75?"NNE":e>33.75||e<56.25?"NE":e>56.25||e<78.75?"ENE":e>78.75||e<101.25?"E":e>101.25||e<123.75?"ESE":e>123.75||e<146.25?"SE":e>146.25||e<168.75?"SSE":e>168.75||e<191.25?"S":e>191.25||e<213.75?"SSW":e>213.75||e<236.25?"SW":e>236.25||e<258.75?"WSW":eg>258.75||e<281.25?"W":e>281.25||e<303.75?"WNW":eg>303.75||e<326.25?"NW":e>326.25||e<348.75?"NNW":void 0),dateTime:new Date(1e3*o.dt),sunRise:new Date(1e3*o.sys.sunrise),sunSet:new Date(1e3*o.sys.sunset),visibility:.001*o.visibility+"km",rain1h:void 0!==o.rain?o.rain["1h"]+"mm":"0mm",rain3h:void 0!==o.rain?o.rain["3h"]+"mm":"0mm",snow1h:void 0!==o.snow?o.snow["1h"]+"mm":"0mm",snow3h:void 0!==o.snow?o.snow["3h"]+"mm":"0mm",location:o.name});console.log(i),function(e){console.log(e);let n=e.tempCurrent,t=e.description,o=e.tempHigh,r=e.tempLow,i=e.tempFeels,a=e.cloudsPercent,c=e.pressure,s=e.humidity,l=e.visibility,u=e.sunRise,d=e.sunSet,A=e.location,p=e.dateTime,m=e.windSpeed,f=e.windDirection;if("0mm"!==e.rain1h){let n=e.rain1h;if(document.querySelector("#rain1HText").textContent=n,"0mm"!==e.rain3h){let n=e.rain3h;document.querySelector("#rain3HText").textContent=n}}if("0mm"!==e.snow1h){let n=e.snow1h;if(document.querySelector("#snow1HText").textContent=n,"0mm"!==e.snow3h){let n=e.snow3h;document.querySelector("#snow3HText").textContent=n}}const x=document.querySelector("#tempCurrentText");console.log(x),x.textContent=n,document.querySelector("#weatherDescriptionText").textContent=t,document.querySelector("#tempHighText").textContent=o,document.querySelector("#tempLowText").textContent=r,document.querySelector("#tempFeelsText").textContent=i,document.querySelector("#windSpeedText").textContent=m,document.querySelector("#windDirectionText").textContent=f,document.querySelector("#cloudsPercentText").textContent=a,document.querySelector("#pressureText").textContent=c,document.querySelector("#humidityText").textContent=s,document.querySelector("#visibilityText").textContent=l,document.querySelector("#sunriseText").textContent=u,document.querySelector("#sunsetText").textContent=d,document.querySelector("#locationText").textContent=A,document.querySelector("#timeText").textContent=p}(i)}else g({code:425,message:"You have not entered a City Name."});var e,n,t,o}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,