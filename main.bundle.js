(()=>{"use strict";var n={917:(n,e,t)=>{t.d(e,{Z:()=>A});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([n.id,"/*\nhtml5doctor.com Reset Stylesheet\nv1.6.1\nLast Updated: 2010-09-17\nAuthor: Richard Clark - http://richclarkdesign.com\nTwitter: @rich_clark\n*/\n\nhtml, body, div, span, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\nabbr, address, cite, code,\ndel, dfn, em, img, ins, kbd, q, samp,\nsmall, strong, sub, sup, var,\nb, i,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section, summary,\ntime, mark, audio, video {\n    margin:0;\n    padding:0;\n    border:0;\n    outline:0;\n    font-size:100%;\n    vertical-align:baseline;\n    background:transparent;\n}\n\nbody {\n    line-height:1;\n}\n\narticle,aside,details,figcaption,figure,\nfooter,header,hgroup,menu,nav,section {\n    display:block;\n}\n\nnav ul {\n    list-style:none;\n}\n\nblockquote, q {\n    quotes:none;\n}\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n    content:'';\n    content:none;\n}\n\na {\n    margin:0;\n    padding:0;\n    font-size:100%;\n    vertical-align:baseline;\n    background:transparent;\n}\n\n/* change colours to suit your needs */\nins {\n    background-color:#ff9;\n    color:#000;\n    text-decoration:none;\n}\n\n/* change colours to suit your needs */\nmark {\n    background-color:#ff9;\n    color:#000;\n    font-style:italic;\n    font-weight:bold;\n}\n\ndel {\n    text-decoration: line-through;\n}\n\nabbr[title], dfn[title] {\n    border-bottom:1px dotted;\n    cursor:help;\n}\n\ntable {\n    border-collapse:collapse;\n    border-spacing:0;\n}\n\n/* change border colour to suit your needs */\nhr {\n    display:block;\n    height:1px;\n    border:0;  \n    border-top:1px solid #cccccc;\n    margin:1em 0;\n    padding:0;\n}\n\ninput, select {\n    vertical-align:middle;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;;;;CAMC;;AAED;;;;;;;;;;;;IAYI,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,SAAS;IACT,cAAc;IACd,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA;IACI,aAAa;AACjB;;AAEA;;IAEI,aAAa;AACjB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,WAAW;AACf;;AAEA;;IAEI,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,QAAQ;IACR,SAAS;IACT,cAAc;IACd,uBAAuB;IACvB,sBAAsB;AAC1B;;AAEA,sCAAsC;AACtC;IACI,qBAAqB;IACrB,UAAU;IACV,oBAAoB;AACxB;;AAEA,sCAAsC;AACtC;IACI,qBAAqB;IACrB,UAAU;IACV,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,wBAAwB;IACxB,WAAW;AACf;;AAEA;IACI,wBAAwB;IACxB,gBAAgB;AACpB;;AAEA,4CAA4C;AAC5C;IACI,aAAa;IACb,UAAU;IACV,QAAQ;IACR,4BAA4B;IAC5B,YAAY;IACZ,SAAS;AACb;;AAEA;IACI,qBAAqB;AACzB",sourcesContent:["/*\nhtml5doctor.com Reset Stylesheet\nv1.6.1\nLast Updated: 2010-09-17\nAuthor: Richard Clark - http://richclarkdesign.com\nTwitter: @rich_clark\n*/\n\nhtml, body, div, span, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\nabbr, address, cite, code,\ndel, dfn, em, img, ins, kbd, q, samp,\nsmall, strong, sub, sup, var,\nb, i,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section, summary,\ntime, mark, audio, video {\n    margin:0;\n    padding:0;\n    border:0;\n    outline:0;\n    font-size:100%;\n    vertical-align:baseline;\n    background:transparent;\n}\n\nbody {\n    line-height:1;\n}\n\narticle,aside,details,figcaption,figure,\nfooter,header,hgroup,menu,nav,section {\n    display:block;\n}\n\nnav ul {\n    list-style:none;\n}\n\nblockquote, q {\n    quotes:none;\n}\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n    content:'';\n    content:none;\n}\n\na {\n    margin:0;\n    padding:0;\n    font-size:100%;\n    vertical-align:baseline;\n    background:transparent;\n}\n\n/* change colours to suit your needs */\nins {\n    background-color:#ff9;\n    color:#000;\n    text-decoration:none;\n}\n\n/* change colours to suit your needs */\nmark {\n    background-color:#ff9;\n    color:#000;\n    font-style:italic;\n    font-weight:bold;\n}\n\ndel {\n    text-decoration: line-through;\n}\n\nabbr[title], dfn[title] {\n    border-bottom:1px dotted;\n    cursor:help;\n}\n\ntable {\n    border-collapse:collapse;\n    border-spacing:0;\n}\n\n/* change border colour to suit your needs */\nhr {\n    display:block;\n    height:1px;\n    border:0;  \n    border-top:1px solid #cccccc;\n    margin:1em 0;\n    padding:0;\n}\n\ninput, select {\n    vertical-align:middle;\n}"],sourceRoot:""}]);const A=i},426:(n,e,t)=>{t.d(e,{Z:()=>A});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([n.id,"body {\n    background-color: black;\n    color: white;\n}\n\n.testing {\n    color: white;\n}\n\n.userInputContainer {\n    margin: 0 auto;\n    justify-content: center;\n    grid-column-end: 3;\n    column-gap: 10px;\n    background-color: rgba(0, 0, 0, 0.5);\n    padding: 10px;\n}\n\n.fieldset {\n    position: relative;\n    border: 1px solid white;\n    padding: 20px;\n    /* width: 50%; */\n    max-width: 620px;\n    margin: 20px auto;\n    min-width: 575px;\n\n}\n\n.fieldset h1 {\n    position: absolute;\n    top: 0;\n    font-size: 18px;\n    line-height: 1;\n    margin: -9px 0 0; /* half of font-size */\n    background: black;\n    padding: 0 3px;\n}\n\n.flexContainer {\n    display: flex;\n    justify-content: space-evenly;\n    /* border: 1px solid green; */\n    grid-column-start: 1;\n    text-align: center;\n    margin-top: 10px;\n}\n\n.dataContainer p {\n    padding: 10px;\n    border: 1px dotted blue;\n    background-color: rgba(0, 0, 0, 0.5);\n    /* margin-top: 10px; */\n}\n\n.flex2 * {\n    flex: 2;\n}\n\n.flex3 * {\n    flex: 3;\n}\n\n.flex4 * {\n    flex: 4;\n}\n\n.hidden {\n    display: none;\n}\n\n.windDataContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    border: 1px solid purple;\n    position: relative;\n    width: 100%;\n    text-align: center;\n    margin: 16px 0;\n    background-color: rgba(0, 0, 0, 0.5);\n    grid-column-start: 2;\n    grid-row-start: 1;\n    grid-row-end: 3;\n}\n\n.gridWeather {\n    display: grid;\n    grid-template-columns: minmax(400px, auto) 25%;\n    justify-items: stretch;\n    column-gap: 10px;\n    /* border: 1px solid pink; */\n}\n\n.dataContainer {\n    position: relative;\n}\n\n.littleLabel {\n    background-color: rgba(0, 0, 0);\n    border-radius: 5px 5px 0 0;\n    position: absolute;\n    font-size: 75%;\n    left: 5%;\n    margin-top: -5px;\n    padding: 0 5px;\n}\n\n.loadingWidget{\n    position: absolute;\n    bottom: 2%;\n    right: 5%;\n    transform: translate(-50%, -50%);\n    z-index: 10;\n    width: 32px;\n    /* height: 64px; */\n    border-radius: 50%;\n    background-color: rgba(0, 0, 0, 0.5);\n}\n\n.weatherIcon {\n    display: inline-block;\n    width: 128px;\n    height: 128px;\n}\n\n.weatherIconContainer {\n    /* position: absolute; */\n    grid-column-start: 2;\n    grid-row-start: 3;\n    grid-row-end: 5;\n    border: 1px solid red;\n    background-color: rgba(0, 0, 0, 0.5);\n    width: 128px;\n    height: 128px;\n    margin: 0 auto;\n}\n\n.gridForecast {\n    display: grid;\n    grid-template-columns: 70% minmax(25px, 30%);\n    justify-items: stretch;\n    /* column-gap: 10px; */\n    border: 1px solid pink;\n}\n\n.forecastWeatherIcon {\n    display: inline-block;\n    width: 64px;\n    height: 64px;\n    background-color: white;\n    grid-column-end: 2;\n\n}\n\n.iconContainer {\n    width: 64px;\n    height: 64px;\n    border: 1px solid red;\n    grid-row-start: 2;\n    grid-row-end: 4;\n    /* margin-right: 5px; */\n}\n\n/* .tempsContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    padding: 0 10px;\n} */\n\n.forecastDayContainer .forecastTemp {\n    grid-column-start: 2;\n    padding-left: 5px;\n    align-self: center;\n}\n\n.forecastDayContainer .dayLabel {\n    grid-column-start: 1;\n    grid-column-end: 3;\n    padding: 5px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,cAAc;IACd,uBAAuB;IACvB,kBAAkB;IAClB,gBAAgB;IAChB,oCAAoC;IACpC,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,uBAAuB;IACvB,aAAa;IACb,gBAAgB;IAChB,gBAAgB;IAChB,iBAAiB;IACjB,gBAAgB;;AAEpB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,eAAe;IACf,cAAc;IACd,gBAAgB,EAAE,sBAAsB;IACxC,iBAAiB;IACjB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,6BAA6B;IAC7B,oBAAoB;IACpB,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,oCAAoC;IACpC,sBAAsB;AAC1B;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,wBAAwB;IACxB,kBAAkB;IAClB,WAAW;IACX,kBAAkB;IAClB,cAAc;IACd,oCAAoC;IACpC,oBAAoB;IACpB,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,8CAA8C;IAC9C,sBAAsB;IACtB,gBAAgB;IAChB,4BAA4B;AAChC;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,+BAA+B;IAC/B,0BAA0B;IAC1B,kBAAkB;IAClB,cAAc;IACd,QAAQ;IACR,gBAAgB;IAChB,cAAc;AAClB;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,SAAS;IACT,gCAAgC;IAChC,WAAW;IACX,WAAW;IACX,kBAAkB;IAClB,kBAAkB;IAClB,oCAAoC;AACxC;;AAEA;IACI,qBAAqB;IACrB,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,wBAAwB;IACxB,oBAAoB;IACpB,iBAAiB;IACjB,eAAe;IACf,qBAAqB;IACrB,oCAAoC;IACpC,YAAY;IACZ,aAAa;IACb,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,4CAA4C;IAC5C,sBAAsB;IACtB,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;IACrB,WAAW;IACX,YAAY;IACZ,uBAAuB;IACvB,kBAAkB;;AAEtB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,qBAAqB;IACrB,iBAAiB;IACjB,eAAe;IACf,uBAAuB;AAC3B;;AAEA;;;;;GAKG;;AAEH;IACI,oBAAoB;IACpB,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,oBAAoB;IACpB,kBAAkB;IAClB,YAAY;AAChB",sourcesContent:["body {\n    background-color: black;\n    color: white;\n}\n\n.testing {\n    color: white;\n}\n\n.userInputContainer {\n    margin: 0 auto;\n    justify-content: center;\n    grid-column-end: 3;\n    column-gap: 10px;\n    background-color: rgba(0, 0, 0, 0.5);\n    padding: 10px;\n}\n\n.fieldset {\n    position: relative;\n    border: 1px solid white;\n    padding: 20px;\n    /* width: 50%; */\n    max-width: 620px;\n    margin: 20px auto;\n    min-width: 575px;\n\n}\n\n.fieldset h1 {\n    position: absolute;\n    top: 0;\n    font-size: 18px;\n    line-height: 1;\n    margin: -9px 0 0; /* half of font-size */\n    background: black;\n    padding: 0 3px;\n}\n\n.flexContainer {\n    display: flex;\n    justify-content: space-evenly;\n    /* border: 1px solid green; */\n    grid-column-start: 1;\n    text-align: center;\n    margin-top: 10px;\n}\n\n.dataContainer p {\n    padding: 10px;\n    border: 1px dotted blue;\n    background-color: rgba(0, 0, 0, 0.5);\n    /* margin-top: 10px; */\n}\n\n.flex2 * {\n    flex: 2;\n}\n\n.flex3 * {\n    flex: 3;\n}\n\n.flex4 * {\n    flex: 4;\n}\n\n.hidden {\n    display: none;\n}\n\n.windDataContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    border: 1px solid purple;\n    position: relative;\n    width: 100%;\n    text-align: center;\n    margin: 16px 0;\n    background-color: rgba(0, 0, 0, 0.5);\n    grid-column-start: 2;\n    grid-row-start: 1;\n    grid-row-end: 3;\n}\n\n.gridWeather {\n    display: grid;\n    grid-template-columns: minmax(400px, auto) 25%;\n    justify-items: stretch;\n    column-gap: 10px;\n    /* border: 1px solid pink; */\n}\n\n.dataContainer {\n    position: relative;\n}\n\n.littleLabel {\n    background-color: rgba(0, 0, 0);\n    border-radius: 5px 5px 0 0;\n    position: absolute;\n    font-size: 75%;\n    left: 5%;\n    margin-top: -5px;\n    padding: 0 5px;\n}\n\n.loadingWidget{\n    position: absolute;\n    bottom: 2%;\n    right: 5%;\n    transform: translate(-50%, -50%);\n    z-index: 10;\n    width: 32px;\n    /* height: 64px; */\n    border-radius: 50%;\n    background-color: rgba(0, 0, 0, 0.5);\n}\n\n.weatherIcon {\n    display: inline-block;\n    width: 128px;\n    height: 128px;\n}\n\n.weatherIconContainer {\n    /* position: absolute; */\n    grid-column-start: 2;\n    grid-row-start: 3;\n    grid-row-end: 5;\n    border: 1px solid red;\n    background-color: rgba(0, 0, 0, 0.5);\n    width: 128px;\n    height: 128px;\n    margin: 0 auto;\n}\n\n.gridForecast {\n    display: grid;\n    grid-template-columns: 70% minmax(25px, 30%);\n    justify-items: stretch;\n    /* column-gap: 10px; */\n    border: 1px solid pink;\n}\n\n.forecastWeatherIcon {\n    display: inline-block;\n    width: 64px;\n    height: 64px;\n    background-color: white;\n    grid-column-end: 2;\n\n}\n\n.iconContainer {\n    width: 64px;\n    height: 64px;\n    border: 1px solid red;\n    grid-row-start: 2;\n    grid-row-end: 4;\n    /* margin-right: 5px; */\n}\n\n/* .tempsContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    padding: 0 10px;\n} */\n\n.forecastDayContainer .forecastTemp {\n    grid-column-start: 2;\n    padding-left: 5px;\n    align-self: center;\n}\n\n.forecastDayContainer .dayLabel {\n    grid-column-start: 1;\n    grid-column-end: 3;\n    padding: 5px;\n}"],sourceRoot:""}]);const A=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,a,r){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(i[s]=!0)}for(var d=0;d<n.length;d++){var c=[].concat(n[d]);o&&i[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var r={},i=[],A=0;A<n.length;A++){var s=n[A],d=o.base?s[0]+o.base:s[0],c=r[d]||0,l="".concat(d," ").concat(c);r[d]=c+1;var u=t(l),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var g=a(p,o);o.byIndex=A,e.splice(A,0,{identifier:l,updater:g,references:1})}i.push(l)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var r=o(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<r.length;i++){var A=t(r[i]);e[A].references--}for(var s=o(n,a),d=0;d<r.length;d++){var c=t(r[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}r=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,a&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var a=e[o];if(void 0!==a)return a.exports;var r=e[o]={id:o,exports:{}};return n[o](r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{function n(n){console.warn(`ERROR(${n.code}): ${n.message}`)}let e="95b3fba8515b07e36f4947f16bc32b95";function o(n){let e,t=Number(n.slice(0,2)),o=n.slice(3,5),a=n.slice(6,8);return t>13?(t-=12,t=t.toString(),e=t+":"+o+":"+a+"PM",e):t<10?(t=t.toString(),e=t+":"+o+":"+a+"AM",e):t>12&&t<13?(e=n+"PM",e):(e=n+"AM",e)}var a=t(379),r=t.n(a),i=t(795),A=t.n(i),s=t(569),d=t.n(s),c=t(565),l=t.n(c),u=t(216),p=t.n(u),g=t(589),m=t.n(g),C=t(917),h={};h.styleTagTransform=m(),h.setAttributes=l(),h.insert=d().bind(null,"head"),h.domAPI=A(),h.insertStyleElement=p(),r()(C.Z,h),C.Z&&C.Z.locals&&C.Z.locals;var B=t(426),f={};let I,b,x,y,w;f.styleTagTransform=m(),f.setAttributes=l(),f.insert=d().bind(null,"head"),f.domAPI=A(),f.insertStyleElement=p(),r()(B.Z,f),B.Z&&B.Z.locals&&B.Z.locals;const v=document.querySelector("#inputPostalCode"),k=document.querySelector("#btnLocalWeather");async function S(){if(x=v.value,v.value="",""!==x){!function(){const n=document.querySelector(".fieldset"),e=document.createElement("img");e.id="loadingWidget",e.classList.add("loadingWidget"),e.src="https://media1.giphy.com/media/3o7bu3XilJ5BOiSGic/giphy.gif?cid=bbfc1e49mgk3jbxodjq4l678y0yz8re86kwacdzkm947vdwv&rid=giphy.gif&ct=g",n.appendChild(e)}(),await async function(){let t=await async function(t,o,a){try{t=t||"93301",a=a||"imperial",o=o||"US";let n=await fetch(`https://api.openweathermap.org/geo/1.0/zip?zip=${t},${o}&appid=${e}`,{mode:"cors"});return await n.json()}catch(e){n(e)}}(x);w=function(n){if("string"!=typeof n)return void console.log("Must pass the zipcode as a string.");if(5!==n.length)return void console.log("Must pass a 5-digit zipcode.");const e=parseInt(n,10);let t,o;return e>=35e3&&e<=36999?(t="AL",o="Alabama"):e>=99500&&e<=99999?(t="AK",o="Alaska"):e>=85e3&&e<=86999?(t="AZ",o="Arizona"):e>=71600&&e<=72999?(t="AR",o="Arkansas"):e>=9e4&&e<=96699?(t="CA",o="California"):e>=8e4&&e<=81999?(t="CO",o="Colorado"):e>=6e3&&e<=6389||e>=6391&&e<=6999?(t="CT",o="Connecticut"):e>=19700&&e<=19999?(t="DE",o="Delaware"):e>=32e3&&e<=34999?(t="FL",o="Florida"):e>=3e4&&e<=31999||e>=39800&&e<=39999?(t="GA",o="Georgia"):e>=96700&&e<=96999?(t="HI",o="Hawaii"):e>=83200&&e<=83999?(t="ID",o="Idaho"):e>=6e4&&e<=62999?(t="IL",o="Illinois"):e>=46e3&&e<=47999?(t="IN",o="Indiana"):e>=5e4&&e<=52999?(t="IA",o="Iowa"):e>=66e3&&e<=67999?(t="KS",o="Kansas"):e>=4e4&&e<=42999?(t="KY",o="Kentucky"):e>=7e4&&e<=71599?(t="LA",o="Louisiana"):e>=3900&&e<=4999?(t="ME",o="Maine"):e>=20600&&e<=21999?(t="MD",o="Maryland"):e>=1e3&&e<=2799||5501==e||5544==e?(t="MA",o="Massachusetts"):e>=48e3&&e<=49999?(t="MI",o="Michigan"):e>=55e3&&e<=56899?(t="MN",o="Minnesota"):e>=38600&&e<=39999?(t="MS",o="Mississippi"):e>=63e3&&e<=65999?(t="MO",o="Missouri"):e>=59e3&&e<=59999?(t="MT",o="Montana"):e>=27e3&&e<=28999?(t="NC",o="North Carolina"):e>=58e3&&e<=58999?(t="ND",o="North Dakota"):e>=68e3&&e<=69999?(t="NE",o="Nebraska"):e>=88900&&e<=89999?(t="NV",o="Nevada"):e>=3e3&&e<=3899?(t="NH",o="New Hampshire"):e>=7e3&&e<=8999?(t="NJ",o="New Jersey"):e>=87e3&&e<=88499?(t="NM",o="New Mexico"):e>=1e4&&e<=14999||6390==e||501==e||544==e?(t="NY",o="New York"):e>=43e3&&e<=45999?(t="OH",o="Ohio"):e>=73e3&&e<=73199||e>=73400&&e<=74999?(t="OK",o="Oklahoma"):e>=97e3&&e<=97999?(t="OR",o="Oregon"):e>=15e3&&e<=19699?(t="PA",o="Pennsylvania"):e>=300&&e<=999?(t="PR",o="Puerto Rico"):e>=2800&&e<=2999?(t="RI",o="Rhode Island"):e>=29e3&&e<=29999?(t="SC",o="South Carolina"):e>=57e3&&e<=57999?(t="SD",o="South Dakota"):e>=37e3&&e<=38599?(t="TN",o="Tennessee"):e>=75e3&&e<=79999||e>=73301&&e<=73399||e>=88500&&e<=88599?(t="TX",o="Texas"):e>=84e3&&e<=84999?(t="UT",o="Utah"):e>=5e3&&e<=5999?(t="VT",o="Vermont"):e>=20100&&e<=20199||e>=22e3&&e<=24699||20598==e?(t="VA",o="Virginia"):e>=2e4&&e<=20099||e>=20200&&e<=20599||e>=56900&&e<=56999?(t="DC",o="Washington DC"):e>=98e3&&e<=99499?(t="WA",o="Washington"):e>=24700&&e<=26999?(t="WV",o="West Virginia"):e>=53e3&&e<=54999?(t="WI",o="Wisconsin"):e>=82e3&&e<=83199?(t="WY",o="Wyoming"):(t="none",o="none",console.log("No state found matching",e)),t}(x),y=t.name,I=t.lat,b=t.lon}();let A=await async function(t,o,a){try{a=a||"imperial";let n=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${t}&lon=${o}&units=${a}&appid=${e}`,{mode:"cors"}),r=await n.json();return console.log(r),r}catch(e){n(e)}}(I,b),s=(await async function(t,o,a){try{a=a||"imperial";let n=await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${t}&lon=${o}&units=${a}&appid=${e}`,{mode:"cors"});console.log(n);let r=await n.json();return console.log(r),r}catch(e){n(e)}}(I,b),await async function(e,t){try{console.log(typeof t),e+=" weather",new Date,t>90&&(console.log("Extreme Hot"),e="Hot as hell! Weather"),t<32&&(console.log("Extreme Cold!"),e="Ice Tundra ");let n=await fetch("https://api.giphy.com/v1/gifs/translate?api_key=0JvtDfunbRZAukBB5R94oBnUtDprGS0i&s="+e,{mode:"cors"});return(await n.json()).data.images.original.url}catch(e){n(e)}}(A.weather[0].description,A.main.temp));!function(n){let e=n.data.tempCurrent,t=n.data.description,o=n.data.icon,a=n.data.tempHigh,r=n.data.tempLow,i=n.data.tempFeels,A=n.data.cloudsPercent,s=n.data.pressure,d=n.data.humidity,c=n.data.visibility,l=n.data.sunRise,u=n.data.sunSet,p=(n.data.location,n.data.dateTime),g=n.data.windSpeed,m=n.data.windDirection;if("0mm"!==n.data.rain1h){let e=n.data.rain1h;if(document.querySelector("#rain1HText").textContent=e,"0mm"!==n.data.rain3h){let e=n.data.rain3h;document.querySelector("#rain3HText").textContent=e}}if("0mm"!==n.data.snow1h){let e=n.data.snow1h;if(document.querySelector("#snow1HText").textContent=e,"0mm"!==n.data.snow3h){let e=n.data.snow3h;document.querySelector("#snow3HText").textContent=e}}const C=document.querySelector(".fieldset");C.style.background=`black url(${n.weatherGif}) no-repeat center`,C.style.backgroundSize="cover",document.querySelector("#tempCurrentText").textContent=e,document.querySelector("#weatherDescriptionText").textContent=t;const h=document.querySelector(".weatherIcon");h.style.background=`url(https://openweathermap.org/img/wn/${o}@2x.png)`,h.style.backgroundSize="cover",document.querySelector("#tempHighText").textContent=a,document.querySelector("#tempLowText").textContent=r,document.querySelector("#tempFeelsText").textContent=i,document.querySelector("#windSpeedText").textContent=g,document.querySelector("#windDirectionText").textContent=m,document.querySelector("#cloudsPercentText").textContent=A,document.querySelector("#pressureText").textContent=s,document.querySelector("#humidityText").textContent=d,document.querySelector("#visibilityText").textContent=c,document.querySelector("#sunriseText").textContent=l,document.querySelector("#sunsetText").textContent=u,document.querySelector("#locationText").textContent=`${n.cityName}, ${n.stateName}`,document.querySelector("#timeText").textContent=p}({data:(t=A,{tempCurrent:Math.round(t.main.temp)+"F°",tempFeels:Math.round(t.main.feels_like)+"F°",tempHigh:Math.round(t.main.temp_max)+"F°",tempLow:Math.round(t.main.temp_min)+"F°",humidity:t.main.humidity+"%",pressure:(i=t.main.pressure,.029529983071445*i).toFixed(2),cloudsPercent:t.clouds.all+"%",description:t.weather[0].description,icon:t.weather[0].icon,windSpeed:(r=t.wind.speed,2.23694*r).toFixed(2)+"mph",windDirection:(a=t.wind.deg,a>348.75||a<11.25?"N":a>11.25||a<33.75?"NNE":a>33.75||a<56.25?"NE":a>56.25||a<78.75?"ENE":a>78.75||a<101.25?"E":a>101.25||a<123.75?"ESE":a>123.75||a<146.25?"SE":a>146.25||a<168.75?"SSE":a>168.75||a<191.25?"S":a>191.25||a<213.75?"SSW":a>213.75||a<236.25?"SW":a>236.25||a<258.75?"WSW":eg>258.75||a<281.25?"W":a>281.25||a<303.75?"WNW":eg>303.75||a<326.25?"NW":a>326.25||a<348.75?"NNW":void 0),dateTime:o(new Date(1e3*t.dt).toTimeString().slice(0,8)),sunRise:o(new Date(1e3*t.sys.sunrise).toTimeString().slice(0,8)),sunSet:o(new Date(1e3*t.sys.sunset).toTimeString().slice(0,8)),visibility:.001*t.visibility+"km",rain1h:void 0!==t.rain?t.rain["1h"]+"mm":"0mm",rain3h:void 0!==t.rain?t.rain["3h"]+"mm":"0mm",snow1h:void 0!==t.snow?t.snow["1h"]+"mm":"0mm",snow3h:void 0!==t.snow?t.snow["3h"]+"mm":"0mm",location:t.name}),cityName:y,stateName:w,weatherGif:s}),document.querySelector("#loadingWidget").remove()}else n({code:425,message:"You have not entered a Postal Code."});var t,a,r,i}v.value="93301",S(),k.addEventListener("click",S),v.addEventListener("keyup",(n=>{"Enter"===n.key&&S()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,