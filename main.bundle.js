(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([n.id,"body {\n    background-color: black;\n    color: white;\n}\n\n.testing {\n    color: white;\n}\n\n.userInputContainer {\n    margin: 0 auto;\n    justify-content: center;\n    grid-column-end: 3;\n    column-gap: 10px;\n}\n\n.fieldset {\n    position: relative;\n    border: 1px solid white;\n    padding: 20px;\n    width: 50%;\n    margin: 0 auto;\n}\n\n.fieldset h1 {\n    position: absolute;\n    top: 0;\n    font-size: 18px;\n    line-height: 1;\n    margin: -9px 0 0; /* half of font-size */\n    background: black;\n    padding: 0 3px;\n}\n\n.flexContainer {\n    display: flex;\n    justify-content: space-evenly;\n    /* border: 1px solid green; */\n    grid-column-start: 1;\n    text-align: center;\n}\n\n.flexContainer p {\n    padding: 10px;\n    border: 1px dotted blue;\n}\n\n.flex2 * {\n    flex: 2;\n}\n\n.flex3 * {\n    flex: 3;\n}\n\n.flex4 * {\n    flex: 4;\n}\n\n.hidden {\n    display: none;\n}\n\n.windDataContainer {\n    display: flex;\n    flex-direction: column;\n    border: 1px solid purple;\n    position: relative;\n    width: 100%;\n    /* padding: 20px; */\n    text-align: center;\n    margin: 16px 0;\n}\n\n.windDataContainer > .dataContainer p {\n    /* padding-top: 20px; */\n    margin: 27px 0 5px 0;\n}\n\n.grid {\n    display: grid;\n    grid-template-columns: auto 25%;\n    justify-items: stretch;\n    /* border: 1px solid pink; */\n}\n\n.dataContainer {\n    position: relative;\n}\n\n.littleLabel {\n    background-color: black;\n    position: absolute;\n    font-size: 75%;\n    left: 5%;\n    margin-top: 10px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,cAAc;IACd,uBAAuB;IACvB,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,uBAAuB;IACvB,aAAa;IACb,UAAU;IACV,cAAc;AAClB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,eAAe;IACf,cAAc;IACd,gBAAgB,EAAE,sBAAsB;IACxC,iBAAiB;IACjB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,6BAA6B;IAC7B,oBAAoB;IACpB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,wBAAwB;IACxB,kBAAkB;IAClB,WAAW;IACX,mBAAmB;IACnB,kBAAkB;IAClB,cAAc;AAClB;;AAEA;IACI,uBAAuB;IACvB,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,+BAA+B;IAC/B,sBAAsB;IACtB,4BAA4B;AAChC;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,uBAAuB;IACvB,kBAAkB;IAClB,cAAc;IACd,QAAQ;IACR,gBAAgB;AACpB",sourcesContent:["body {\n    background-color: black;\n    color: white;\n}\n\n.testing {\n    color: white;\n}\n\n.userInputContainer {\n    margin: 0 auto;\n    justify-content: center;\n    grid-column-end: 3;\n    column-gap: 10px;\n}\n\n.fieldset {\n    position: relative;\n    border: 1px solid white;\n    padding: 20px;\n    width: 50%;\n    margin: 0 auto;\n}\n\n.fieldset h1 {\n    position: absolute;\n    top: 0;\n    font-size: 18px;\n    line-height: 1;\n    margin: -9px 0 0; /* half of font-size */\n    background: black;\n    padding: 0 3px;\n}\n\n.flexContainer {\n    display: flex;\n    justify-content: space-evenly;\n    /* border: 1px solid green; */\n    grid-column-start: 1;\n    text-align: center;\n}\n\n.flexContainer p {\n    padding: 10px;\n    border: 1px dotted blue;\n}\n\n.flex2 * {\n    flex: 2;\n}\n\n.flex3 * {\n    flex: 3;\n}\n\n.flex4 * {\n    flex: 4;\n}\n\n.hidden {\n    display: none;\n}\n\n.windDataContainer {\n    display: flex;\n    flex-direction: column;\n    border: 1px solid purple;\n    position: relative;\n    width: 100%;\n    /* padding: 20px; */\n    text-align: center;\n    margin: 16px 0;\n}\n\n.windDataContainer > .dataContainer p {\n    /* padding-top: 20px; */\n    margin: 27px 0 5px 0;\n}\n\n.grid {\n    display: grid;\n    grid-template-columns: auto 25%;\n    justify-items: stretch;\n    /* border: 1px solid pink; */\n}\n\n.dataContainer {\n    position: relative;\n}\n\n.littleLabel {\n    background-color: black;\n    position: absolute;\n    font-size: 75%;\n    left: 5%;\n    margin-top: 10px;\n}"],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);o&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],l=o.base?s[0]+o.base:s[0],A=i[l]||0,d="".concat(l," ").concat(A);i[l]=A+1;var u=t(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=r(p,o);o.byIndex=c,e.splice(c,0,{identifier:d,updater:m,references:1})}a.push(d)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=t(i[a]);e[c].references--}for(var s=o(n,r),l=0;l<i.length;l++){var A=t(i[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}i=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{function n(n){console.warn(`ERROR(${n.code}): ${n.message}`)}let e="95b3fba8515b07e36f4947f16bc32b95";var o=t(379),r=t.n(o),i=t(795),a=t.n(i),c=t(569),s=t.n(c),l=t(565),A=t.n(l),d=t(216),u=t.n(d),p=t(589),m=t.n(p),f=t(426),x={};let C,h,g,B,y;x.styleTagTransform=m(),x.setAttributes=A(),x.insert=s().bind(null,"head"),x.domAPI=a(),x.insertStyleElement=u(),r()(f.Z,x),f.Z&&f.Z.locals&&f.Z.locals;const v=document.querySelector("#inputPostalCode");document.querySelector("#btnLocalWeather").addEventListener("click",(async()=>{if(g=v.value,v.value="",""!==g){await async function(){let t=await async function(t,o,r){try{t=t||"93301",r=r||"imperial",o=o||"US";let n=await fetch(`https://api.openweathermap.org/geo/1.0/zip?zip=${t},${o}&appid=${e}`,{mode:"cors"});return await n.json()}catch(e){n(e)}}(g);console.log(t),y=getState(g),B=t.name,C=t.lat,h=t.lon}();let a=await async function(t,o,r){try{r=r||"imperial";let n=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${t}&lon=${o}&units=${r}&appid=${e}`,{mode:"cors"}),i=await n.json();return console.log(i),i}catch(e){n(e)}}(C,h);console.log(a);let c=(t=a,{tempCurrent:Math.round(t.main.temp)+"F째",tempFeels:Math.round(t.main.feels_like)+"F째",tempHigh:Math.round(t.main.temp_max)+"F째",tempLow:Math.round(t.main.temp_min)+"F째",humidity:t.main.humidity+"%",pressure:(i=t.main.pressure,.029529983071445*i).toFixed(2),cloudsPercent:t.clouds.all+"%",description:t.weather[0].description,windSpeed:(r=t.wind.speed,2.23694*r).toFixed(2)+"mph",windDirection:(o=t.wind.deg,o>348.75||o<11.25?"N":o>11.25||o<33.75?"NNE":o>33.75||o<56.25?"NE":o>56.25||o<78.75?"ENE":o>78.75||o<101.25?"E":o>101.25||o<123.75?"ESE":o>123.75||o<146.25?"SE":o>146.25||o<168.75?"SSE":o>168.75||o<191.25?"S":o>191.25||o<213.75?"SSW":o>213.75||o<236.25?"SW":o>236.25||o<258.75?"WSW":eg>258.75||o<281.25?"W":o>281.25||o<303.75?"WNW":eg>303.75||o<326.25?"NW":o>326.25||o<348.75?"NNW":void 0),dateTime:new Date(1e3*t.dt).toTimeString().slice(0,8),sunRise:new Date(1e3*t.sys.sunrise).toTimeString().slice(0,8),sunSet:new Date(1e3*t.sys.sunset).toTimeString().slice(0,8),visibility:.001*t.visibility+"km",rain1h:void 0!==t.rain?t.rain["1h"]+"mm":"0mm",rain3h:void 0!==t.rain?t.rain["3h"]+"mm":"0mm",snow1h:void 0!==t.snow?t.snow["1h"]+"mm":"0mm",snow3h:void 0!==t.snow?t.snow["3h"]+"mm":"0mm",location:t.name});console.log(c),function(n){console.log(n);let e=n.tempCurrent,t=n.description,o=n.tempHigh,r=n.tempLow,i=n.tempFeels,a=n.cloudsPercent,c=n.pressure,s=n.humidity,l=n.visibility,A=n.sunRise,d=n.sunSet,u=(n.location,n.dateTime),p=n.windSpeed,m=n.windDirection;if("0mm"!==n.rain1h){let e=n.rain1h;if(document.querySelector("#rain1HText").textContent=e,"0mm"!==n.rain3h){let e=n.rain3h;document.querySelector("#rain3HText").textContent=e}}if("0mm"!==n.snow1h){let e=n.snow1h;if(document.querySelector("#snow1HText").textContent=e,"0mm"!==n.snow3h){let e=n.snow3h;document.querySelector("#snow3HText").textContent=e}}const f=document.querySelector("#tempCurrentText");console.log(f),f.textContent=e,document.querySelector("#weatherDescriptionText").textContent=t,document.querySelector("#tempHighText").textContent=o,document.querySelector("#tempLowText").textContent=r,document.querySelector("#tempFeelsText").textContent=i,document.querySelector("#windSpeedText").textContent=p,document.querySelector("#windDirectionText").textContent=m,document.querySelector("#cloudsPercentText").textContent=a,document.querySelector("#pressureText").textContent=c,document.querySelector("#humidityText").textContent=s,document.querySelector("#visibilityText").textContent=l,document.querySelector("#sunriseText").textContent=A,document.querySelector("#sunsetText").textContent=d,document.querySelector("#locationText").textContent=`${B}, ${y}`,document.querySelector("#timeText").textContent=u}(c)}else n({code:425,message:"You have not entered a Postal Code."});var t,o,r,i}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,